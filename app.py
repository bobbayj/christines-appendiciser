# app.py
# Bob Jin
# Editable UI version of the MVC application
# Inherits from the Ui_MainWindow class defined in mainwindow.py
# Provides functionality to the interative widgets: # 2 push buttons, 1 line-edit
# The class maintains a reference to the model that implements
# the logic of the app. The model is defined in class Model, in model.py


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSlot
from mainwindow import Ui_MainWindow
import sys

# local imports
from model import Model
from appender import Appender


class MainWindowUIClass( Ui_MainWindow ):
    def __init__( self ):
        '''Initialize the super class
        '''
        super().__init__()
        self.model = Model()
        
    def setupUi( self, MW ):
        ''' Setup the UI of the super class, and add here code
        that relates to the way we want our UI to operate.
        '''
        super().setupUi( MW )

    def debugPrint( self, msg ):
        '''Print the message in the text edit at the bottom of the
        horizontal splitter.
        '''
        self.debugTextBrowser.append( msg )

    def refreshAll(self):
      '''
      Updates the widgets whenever an interaction happens.
      Typically, some interaction takes place, the UI responds,
      and informs the model of the change. Then this method
      is called, pulling from the model information that is
      updated in the GUI.
      '''
      self.FolderPathLineEdit.setText( self.model.getFolderPath() )

    # slot
    def returnedFolderSlot( self ):
        ''' Called when the text is changed in the line edit.
        '''
        folderPath = self.FolderPathLineEdit.text()
        if self.model.isValid( folderPath ):
          self.model.setFolderPath( self.FolderPathLineEdit.text() )
        else:
          m = QtWidgets.QMessageBox()
          m.setText("Invalid folder path!\n" + folderPath )
          m.setIcon(QtWidgets.QMessageBox.Warning)
          m.setStandardButtons(QtWidgets.QMessageBox.Ok
                                | QtWidgets.QMessageBox.Cancel)
          m.setDefaultButton(QtWidgets.QMessageBox.Cancel)
          ret = m.exec_()
          self.FolderPathLineEdit.setText( "" )
          self.debugPrint(" Invalid folder path specific: " + folderPath )
        
        self.refreshAll()

    # slot
    def returnedOutputNameSlot( self ):
        ''' Called when the user enters a string in the line edit and
        presses the ENTER key.
        '''
        outputName = self.OutputLineEdit.text()
        if outputName[-4:] != '.pdf':
          outputName += '.pdf'
        
        self.model.setOutputName( outputName )
        self.OutputLineEdit.setText ( outputName )
        self.debugPrint("Setting output name: " + outputName)
        
        self.refreshAll


    # slot
    def mergeSlot( self ):
        ''' Called when the user presses the Merge button.
        '''
        folderPath = self.model.getFolderPath()
        outputName = self.model.getOutputName()

        Appender(folderPath, outputName)
        m = QtWidgets.QMessageBox()
        m.setText(f"Appendix has been merged into {outputName}.\nFolder: {folderPath}")
        m.setIcon(QtWidgets.QMessageBox.Information)
        m.setStandardButtons(QtWidgets.QMessageBox.Ok)
        m.setDefaultButton(QtWidgets.QMessageBox.Ok)
        
        self.debugPrint( "Appendix merged into report with name: " + outputName)

    # slot
    def browseSlot( self ):
        ''' Called when the user presses the Browse button
        '''
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        options |= QtWidgets.QFileDialog.ShowDirsOnly
        options |= QtWidgets.QFileDialog.DontResolveSymlinks
        
        folderPath = QtWidgets.QFileDialog.getExistingDirectory(
          None,
          'Select Folder containing final report and folder of appendices',
          '',
          options = options
        )

        if folderPath:
          self.debugPrint("Setting folder path: " + folderPath)
          self.FolderPathLineEdit.setText(folderPath)
          self.model.setFolderPath (folderPath)
          self.refreshAll()


def main():
    """
    This is the MAIN ENTRY POINT of our application.  The code at the end
    of the mainwindow.py script will not be executed, since this script is now
    our main program.   We have simply copied the code from mainwindow.py here
    since it was automatically generated by '''pyuic5'''.

    """
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = MainWindowUIClass()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

main()